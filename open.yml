openapi: "3.0.0"
info:
  title: PetComilao api
  description: Api to manipulate info of orders
  termsOfService: http://swagger.io/terms/
  contact:
    email: matheus.ferreira70@fatec.sp.gov.br

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: https://fatecfranca.edu.br

tags:
  - name: pet
    description: Operations to handle products info
paths:
  /pets:
    get:
      tags:
        - order
      summary: List orders
      parameters:
        - name: pet.name
          in: query
          description: CPF of customer
          required: false
          schema:
            type: string

      responses:
        "200":
          description: Orders found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
    post:
      description: "create a new pet"
      parameters:
        - name: pet
          in: path
          description: Pet object
          required: true
          schema:
            $ref: "#/components/schemas/Pet"
      responses:
        "200":
          description: OK
  /pets/{id}:
    get:
      tags:
        - order
      summary: List orders
      parameters:
        - name: name_in
          in: path
          description: Id order
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Orders found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"

    put:
      description: ""
      parameters: []
      responses:
        "200":
          description: OK
    delete:
      tags:
        - pet
      summary: Delete a pet
      parameters:
        - name: id
          in: path
          description: ID of the pet to be deleted
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Pet successfully deleted
        "404":
          description: Pet not found
  /users/{id}/pets:
    get:
      tags:
        - order
      summary: List Orders Itens
      parameters:
        - name: id
          in: path
          description: ID of the order
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    

  /users:
    get:
      summary: Retorna a lista de usuários cadastrados
      operationId: getUsers
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - api_key: []

    post:
      summary: Cria um novo usuário
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
      security:
        - api_key: []

  /users/{id}:
   get:
    summary: Retorna um usuário específico pelo ID
    operationId: getUserById
    tags:
      - Users
    parameters:
      - in: path
        name: id
        required: true
        description: ID do usuário
        schema:
          type: string
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    security:
      - api_key: []

   put:
      summary: Atualiza um usuário existente pelo ID
      operationId: updateUserById
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID do usuário
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: No Content
      security:
        - api_key: []
   delete:
      summary: Remove um usuário existente pelo ID
      operationId: deleteUserById
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID do usuário
          schema:
            type: string
      responses:
        '204':
          description: No Content
      security:
        - api_key: []
components:
  schemas:

    Pet:
      type: object
      properties:
        id:
          format: string
          example: sdfsdf-sdfsf-sdf
        name:
          format: string
          example: mary
        species:
          format: string
          example: gato
        breed:
          format: string
          example: persa
        age:
          format: number
          example: 2
        gender:
          format: string
          example: femea
        weight:
          format: decimal
          example: 10.5
    User:
      type: object
      properties:
        id:
          format: string
          example: sdfsdf-sdfsf-sdf
        name:
          format: string
          example: mary
        cpf:
          format: string
          example: 403.433.948-98
        email:
          format: string
          example: matheusbf.mf@gmail.com
        phone:
          format: string
          example: 99.99999-9999
        password:
          format: string
          example: 123456
        address:
          type: object
          properties:
            street:
              format: string
              example: rua 1
            number:
              format: string
              example: 123
            complement:
              format: string
              example: casa
            neighborhood:
              format: string
              example: centro
            city:
              format: string
              example: franca
            state:
              format: string
              example: sp
            zipCode:
              format: string
              example: 14400-000
          